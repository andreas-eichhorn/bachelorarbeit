
@article{johnston_advances_2004,
	title = {Advances in dataflow programming languages},
	volume = {36},
	issn = {0360-0300, 1557-7341},
	url = {https://dl.acm.org/doi/10.1145/1013208.1013209},
	doi = {10.1145/1013208.1013209},
	abstract = {Many developments have taken place within dataﬂow programming languages in the past decade. In particular, there has been a great deal of activity and advancement in the ﬁeld of dataﬂow visual programming languages. The motivation for this article is to review the content of these recent developments and how they came about. It is supported by an initial review of dataﬂow programming in the 1970s and 1980s that led to current topics of research. It then discusses how dataﬂow programming evolved toward a hybrid von Neumann dataﬂow formulation, and adopted a more coarse-grained approach. Recent trends toward dataﬂow visual programming languages are then discussed with reference to key graphical dataﬂow languages and their development environments. Finally, the article details four key open topics in dataﬂow programming languages.},
	language = {en},
	number = {1},
	urldate = {2025-01-24},
	journal = {ACM Computing Surveys},
	author = {Johnston, Wesley M. and Hanna, J. R. Paul and Millar, Richard J.},
	month = mar,
	year = {2004},
	keywords = {notion},
	pages = {1--34},
	file = {PDF:C\:\\Users\\andre\\Zotero\\storage\\EXIT9ANP\\Johnston et al. - 2004 - Advances in dataflow programming languages.pdf:application/pdf},
}

@article{chen_iteration_2021,
	title = {Iteration vs. {Recursion}: {Two} {Basic} {Algorithm} {Design} {Methodologies}},
	volume = {52},
	issn = {0163-5700},
	shorttitle = {Iteration vs. {Recursion}},
	url = {https://dl.acm.org/doi/10.1145/3457588.3457601},
	doi = {10.1145/3457588.3457601},
	abstract = {Iteration and recursion are two essential approaches in Algorithm Design and Computer Programming. Both iteration and recursion are needed for repetitive processes in computing. An iterative structure is a loop in which a collection of instructions and statements will be repeated. A recursive structure is formed by a procedure that calls itself to make a complete performance, which is an alternate way to repeat the process.},
	number = {1},
	urldate = {2025-01-28},
	journal = {SIGACT News},
	author = {Chen, Li},
	month = mar,
	year = {2021},
	keywords = {notion},
	pages = {81--86},
	file = {Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\6A75P6EE\\Chen - 2021 - Iteration vs. Recursion Two Basic Algorithm Design Methodologies.pdf:application/pdf},
}

@article{arvind_dataflow_1986,
	title = {Dataflow {Architectures}},
	url = {https://www.researchgate.net/publication/234148580_Dataflow_Architectures},
	doi = {10.1146/annurev.cs.01.060186.001301},
	abstract = {PDF {\textbar} On Nov 28, 2003, Arvind and others published Dataflow Architectures {\textbar} Find, read and cite all the research you need on ResearchGate},
	language = {en},
	urldate = {2025-01-28},
	journal = {LCS Technical Memos},
	author = {{Arvind} and Culler, David E.},
	month = feb,
	year = {1986},
	keywords = {notion},
	file = {Snapshot:C\:\\Users\\andre\\Zotero\\storage\\NLD2BZHN\\234148580_Dataflow_Architectures.html:text/html},
}

@article{ambler_visual_1990,
	title = {Visual forms of iteration that preserve single assignment},
	volume = {1},
	issn = {1045-926X},
	url = {https://www.sciencedirect.com/science/article/pii/S1045926X0580014X},
	doi = {10.1016/S1045-926X(05)80014-X},
	abstract = {Many visual languages follow the principle of single assignment, particularly those based on declarative programming paradigms. However, the notion of single assignment seems at odds with most forms of iteration. In this paper, we survey a variety of approaches to this problem, and then present the approach used in the visual language Forms/2.},
	number = {2},
	urldate = {2025-01-28},
	journal = {Journal of Visual Languages \& Computing},
	author = {Ambler, Allen L. and Burnett, Margaret M.},
	month = jun,
	year = {1990},
	keywords = {notion},
	pages = {159--181},
	file = {PDF:C\:\\Users\\andre\\Zotero\\storage\\KV2IM79L\\Ambler und Burnett - 1990 - Visual forms of iteration that preserve single assignment.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\andre\\Zotero\\storage\\FZ2W9VII\\S1045926X0580014X.html:text/html},
}

@article{mosconi_iteration_2000,
	title = {Iteration constructs in data-flow visual programming languages},
	volume = {26},
	issn = {0096-0551},
	url = {https://www.sciencedirect.com/science/article/pii/S0096055101000091},
	doi = {10.1016/S0096-0551(01)00009-1},
	abstract = {Many visual programming languages (VPLs) rely on the data-flow paradigm, probably because of its simple and intuitive functioning mechanism. However, there are cases where more powerful programming constructs are needed to deal with complex problems. For example, iteration is undoubtedly an important aspect of programming, and should allow repetitive behaviors to be specified in compact and easy ways. Most existing data-flow VPLs provide special constructs to implement iterations, therefore infringing the pure data-flow paradigm in favor of program simplicity. This paper has three main purposes: (1) To provide a survey of the mechanisms used by some representative data-flow VPLs to carry out iterations; (2) To investigate, given a pure data-flow VPL, what should be the minimum set of characteristics which, after being added to the VPL, allow iterations to be implemented; and (3) To show real data-flow iteration implementations which rely on the characteristics pertaining to such a minimum set.},
	number = {2},
	urldate = {2025-01-29},
	journal = {Computer Languages},
	author = {Mosconi, M. and Porta, M.},
	month = jul,
	year = {2000},
	keywords = {notion, Data-flow visual languages, Iterations, Visual programming},
	pages = {67--104},
	file = {ScienceDirect Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\7J4GZH8Y\\Mosconi und Porta - 2000 - Iteration constructs in data-flow visual programming languages.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\andre\\Zotero\\storage\\K6BC764P\\S0096055101000091.html:text/html},
}

@inproceedings{fan_loop_2022,
	title = {A {Loop} {Optimization} {Method} for {Dataflow} {Architecture}},
	url = {https://ieeexplore.ieee.org/document/10074943},
	doi = {10.1109/HPCC-DSS-SmartCity-DependSys57074.2022.00059},
	abstract = {Dataflow architecture is a promising parallel computing platform that provides high performance, high efficiency and flexibility. Since the execution of a loop is usually the most time-consuming in a program, extracting sufficient loop-level parallelism is an essential task of dataflow architecture. However, existing methods often result in low execution performance and poor hardware utilization due to the imbalance among dataflow graph nodes and the non-preemptive mechanism. To tackle these problems, this paper makes three contributions: 1) A highly effective dataflow graph balancing method is developed to improve the utilization. 2) An enhanced dataflow execution model is proposed, which adapts a novel preemptive mechanism to further improve the hardware utilization and performance. 3) A decoupled dataflow architecture is designed to efficiently support our proposed dataflow execution model. Experiment shows that our methods can achieve an average of 2.61 ×performance improvement and 2.5 ×utilization improvement compared to the state-of-the-art methods with acceptable overhead.},
	urldate = {2025-01-31},
	booktitle = {2022 {IEEE} 24th {Int} {Conf} on {High} {Performance} {Computing} \& {Communications}; 8th {Int} {Conf} on {Data} {Science} \& {Systems}; 20th {Int} {Conf} on {Smart} {City}; 8th {Int} {Conf} on {Dependability} in {Sensor}, {Cloud} \& {Big} {Data} {Systems} \& {Application} ({HPCC}/{DSS}/{SmartCity}/{DependSys})},
	author = {Fan, Zhihua and Li, Wenming and Liu, Tianyu and Tang, Shengzhong and Wang, Zhen and An, Xuejun and Ye, Xiaochun and Fan, Dongrui},
	month = dec,
	year = {2022},
	keywords = {notion, Adaptation models, Computer architecture, Costs, Dataflow Architecture, Dataflow Execution Model, Dataflow Graph Pipelining, Hardware, Hazards, Loops, Optimization methods, Task analysis},
	pages = {202--211},
	file = {Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\G3L8FDWD\\Fan et al. - 2022 - A Loop Optimization Method for Dataflow Architecture.pdf:application/pdf},
}

@article{gevay_handling_2021,
	title = {Handling {Iterations} in {Distributed} {Dataflow} {Systems}},
	volume = {54},
	issn = {0360-0300},
	url = {https://dl.acm.org/doi/10.1145/3477602},
	doi = {10.1145/3477602},
	abstract = {Over the past decade, distributed dataflow systems (DDS) have become a standard technology. In these systems, users write programs in restricted dataflow programming models, such as MapReduce, which enable them to scale out program execution to a shared-nothing cluster of machines. Yet, there is no established consensus that prescribes how to extend these programming models to support iterative algorithms. In this survey, we review the research literature and identify how DDS handle control flow, such as iteration, from both the programming model and execution level perspectives. This survey will be of interest for both users and designers of DDS.},
	number = {9},
	urldate = {2025-01-31},
	journal = {ACM Comput. Surv.},
	author = {Gévay, Gábor E. and Soto, Juan and Markl, Volker},
	month = oct,
	year = {2021},
	keywords = {notion},
	pages = {199:1--199:38},
	file = {Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\68SV5ZSA\\Gévay et al. - 2021 - Handling Iterations in Distributed Dataflow Systems.pdf:application/pdf},
}

@article{alves_concurrency_2021,
	title = {Concurrency {Analysis} in {Dynamic} {Dataflow} {Graphs}},
	volume = {9},
	issn = {2168-6750},
	url = {https://ieeexplore.ieee.org/document/8269827},
	doi = {10.1109/TETC.2018.2799078},
	abstract = {Dynamic dataflow scheduling enables effective exploitation of concurrency while making parallel programming easier. To this end, analyzing the inherent degree of concurrency available in dataflow graphs is an important task, since it may aid compilers or programmers to assess the potential performance a program can achieve via parallel execution. However, traditional concurrency analysis techniques only work for DAGs (directed acyclic graphs), hence the need for new techniques that contemplate graphs with cycles. In this paper we present techniques to perform concurrency analysis on generic dynamic dataflow graphs, even in the presence of cycles. In a dataflow graph, nodes represent instructions and edges describe dependencies. The novelty of our approach is that we allow concurrency between different iterations of the loops. Consequently, a set of concurrent nodes may contain instructions from different loops that can be proven independent. In this work, we provide a set of theoretical tools for obtaining bounds and illustrate implementation of parallel dataflow runtime on a set of representative graphs for important classes of benchmarks to compare measured performance against derived bounds.},
	number = {1},
	urldate = {2025-01-31},
	journal = {IEEE Transactions on Emerging Topics in Computing},
	author = {Alves, Tiago A. O. and Marzulo, Leandro A. J. and Kundu, Sandip and França, Felipe M. G.},
	month = jan,
	year = {2021},
	note = {Conference Name: IEEE Transactions on Emerging Topics in Computing},
	keywords = {notion, Concurrent computing, Dataflow, distributed computing, Dynamic scheduling, Heuristic algorithms, high performance computing, Measurement, Optimal scheduling, parallel programming, Performance analysis, Tools},
	pages = {44--54},
	file = {Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\RP6SG5AN\\Alves et al. - 2021 - Concurrency Analysis in Dynamic Dataflow Graphs.pdf:application/pdf},
}

@inproceedings{ye_loop_2024,
	title = {Loop {Unrolling} {Based} on {SLP} and {Register} {Pressure} {Awareness}},
	url = {https://ieeexplore.ieee.org/document/10702289},
	doi = {10.1109/ICNC-FSKD64080.2024.10702289},
	abstract = {Loop unrolling is a common compiler optimization technique that reduces the execution count of loop branch instructions and improves program performance by merging multiple iterations of a loop body into a single iteration. In LLVM, the native loop unrolling model considers only the impact of the number of instructions within the loop body when computing the unrolling factor, without accounting for subsequent optimizations and register resources. To address this issue, a new loop unrolling model is proposed that takes into account subsequent superword level parallelism (SLP) vectorization and register pressure. When computing the unrolling factor, the model uses the benefit for SLP (BSLP) model to identify loops that can be vectorized by SLP after loop unrolling and calculates the unrolling factor to support subsequent SLP vectorization. The register pressure-aware loop unrolling (RPLU) model adjusts the unrolling factor to mitigate excessive register pressure, thereby reducing the impact of register spills. Experimental results show that, compared to the loop unrolling model in LLVM, this model can compute more effective loop unrolling factors and improve program performance. The average speedup on the SPEC CPU 2006 benchmark suite is 2.0\%, with a maximum speedup of 5.1\%, and the average speedup on the TSVC benchmark suite is 5.1\%, with a maximum speedup of 34.4\%.},
	urldate = {2025-02-01},
	booktitle = {2024 20th {International} {Conference} on {Natural} {Computation}, {Fuzzy} {Systems} and {Knowledge} {Discovery} ({ICNC}-{FSKD})},
	author = {Ye, Zilong and Jiao, Jiye},
	month = jul,
	year = {2024},
	keywords = {notion, Parallel processing, Benchmark testing, compiler optimization, Computational modeling, Fuzzy systems, Knowledge discovery, loop unrolling, Merging, Optimization, Program processors, register pressure, Registers, unrolling factor, vectorization},
	pages = {1--6},
	file = {Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\QP4PNEZ5\\Ye und Jiao - 2024 - Loop Unrolling Based on SLP and Register Pressure Awareness.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\andre\\Zotero\\storage\\88EZF5I5\\10702289.html:text/html},
}

@inproceedings{lucanin_visual_2011,
	title = {A visual programming language for drawing and executing flowcharts},
	url = {https://ieeexplore.ieee.org/document/5967331},
	abstract = {With recent advances in graphical user interfaces, more and more tasks on computers have become easier to perform. Out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal of VPLs is to shift a part of work from the programmer to the IDE so that the programmer can focus more on algorithm logic than the syntax of the implementation programming language. In this article, the methods required to build a VPL are presented, with an emphasis on a novel method of code generation in a WHILE language. Also, the methods for achieving basic principles of VPLs will be shown — suitable visual presentation of information and guiding the programmer in the right direction using constraints. These methods are demonstrated on an example of vIDE, a VPL based on the Eclipse integrated development environment (IDE). The design of vIDE with respect to the Eclipse Graphical Modeling Framework (GMF) is described. The concept of a flowchart graphical notation is examined in contrast with the algorithm model it maps to. Finally, the disambiguity of the model representation of an algorithm is discussed and the methods for transforming it to an actual implementation in a programming language.},
	urldate = {2025-02-01},
	booktitle = {2011 {Proceedings} of the 34th {International} {Convention} {MIPRO}},
	author = {Lučanin, Dražen and Fabek, Ivan},
	month = may,
	year = {2011},
	keywords = {notion, Computer languages, Data structures, algorithm, Eclipse, flowchart, Flowcharts, GMF, GOTO, GUI, model, OCL, programming language, Programming profession, Python, Syntactics, vIDE, visual programming, Visualization, VPL, WHILE},
	pages = {1679--1684},
	file = {Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\DZEB6CDF\\Lučanin und Fabek - 2011 - A visual programming language for drawing and executing flowcharts.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\andre\\Zotero\\storage\\HHCJ3R2P\\5967331.html:text/html},
}

@article{davis_data_1982,
	title = {Data {Flow} {Program} {Graphs}},
	url = {https://scholarship.claremont.edu/hmc_fac_pub/285},
	journal = {All HMC Faculty Publications and Research},
	author = {Davis, Alan and Keller, Robert},
	month = feb,
	year = {1982},
	keywords = {notion},
	file = {"Data Flow Program Graphs" by Alan L. Davis and Robert M. Keller:C\:\\Users\\andre\\Zotero\\storage\\RWLIJKZH\\285.html:text/html;PDF:C\:\\Users\\andre\\Zotero\\storage\\JSZE5UBZ\\Davis und Keller - 1982 - Data Flow Program Graphs.pdf:application/pdf},
}

@article{boshernitsan_visual_2004,
	title = {Visual {Programming} {Languages}: {A} {Survey}},
	abstract = {Over the past ten years, frequent increases in computer processing speed and graphics display capabilities have made possible a great deal of research and experimentation in the ﬁeld of visual programming languages. A variety of diﬀerent design methodologies have arisen from these research eﬀorts, and numerous visual programming systems have been developed to address both speciﬁc application areas, such as user interface design and physical simulation, and more general programming tasks. We present a survey of the ﬁeld of visual programming languages beginning with an historical overview of some of the pioneering eﬀorts in the ﬁeld. In addition, we present diﬀerent classiﬁcations of visual programming languages, touch on implementation and design issues, and discuss eﬀorts to formalize the theoretical basis for visual languages. We also discuss and examine a variety of the more important projects in the ﬁeld over the last few years.},
	language = {en},
	journal = {EECS University of California, Berkeley},
	author = {Boshernitsan, Marat and Downes, Michael},
	month = dec,
	year = {2004},
	keywords = {notion},
	file = {PDF:C\:\\Users\\andre\\Zotero\\storage\\P3VUS6BJ\\Boshernitsan und Downes - Visual Programming Languages A Survey.pdf:application/pdf},
}

@inproceedings{charntaweekhun_visual_2006,
	title = {Visual {Programming} using {Flowchart}},
	url = {https://ieeexplore.ieee.org/document/4141379},
	doi = {10.1109/ISCIT.2006.339940},
	abstract = {Nowadays a computer programming become the fundamental knowledge for people studying or working in a computer field, e.g. computer engineering, computer science, information technology, etc. Programmer not only considers the algorithm carefully but also performs the coding according to the syntax of programming language used. Therefore writing a computer program is a difficult task, especially for a beginner. In fact, a novice often uses a flowchart as a tool to help him summarize the idea into all necessary steps of solution, but this flowchart cannot be understood by the computer. It must be converted to the program by using some programming language and then be compiled and run. The visual programming using flowchart proposed in this paper allows the programmer to write the program in the format of flowchart, then compiles and run, without the coding step. There is no necessity to remember the syntax of any programming languages. It takes the benefits of easy-to-understand and easy-to-perform of the flowchart, whereas eliminates the weakness of a conventional programming, e.g. the requirement of remembering the syntax, the error in coding step. Furthermore, a debugging of program by the proposed system is straightforward and easy to discover the error. The proposed system could be used as a tool for teaching the basic concept of structural programming as well. Experimental results show the powerfulness, easiness, and user-friendliness of the proposed system},
	urldate = {2025-02-02},
	booktitle = {2006 {International} {Symposium} on {Communications} and {Information} {Technologies}},
	author = {Charntaweekhun, Kanis and Wangsiripitak, Somkiat},
	month = oct,
	year = {2006},
	keywords = {notion, Algorithm design and analysis, Computer languages, Computer science, Flowcharts, Programming profession, Computer errors, Education, Electronic mail, Knowledge engineering, Writing},
	pages = {1062--1065},
	file = {IEEE Xplore Abstract Record:C\:\\Users\\andre\\Zotero\\storage\\S8PNF799\\4141379.html:text/html;PDF:C\:\\Users\\andre\\Zotero\\storage\\8BD86BNG\\Charntaweekhun und Wangsiripitak - 2006 - Visual Programming using Flowchart.pdf:application/pdf},
}

@article{burnett_scaling_1995,
	title = {Scaling up visual programming languages},
	volume = {28},
	issn = {1558-0814},
	url = {https://ieeexplore.ieee.org/document/366157},
	doi = {10.1109/2.366157},
	abstract = {The directness, immediacy, and simplicity of visual programming languages are appealing. The question is, can VPLs be effectively applied to large scale programming problems while retaining these characteristics. In scaling up, the problem is how to expand applicability without sacrificing the goals of better logic expression and understanding. From a size standpoint, scaling up refers to the programmer's ability to apply VPLs in larger programs. Such programs range from those requiring several days' work by a single programmer to programs requiring months of work, large programming teams, and large data structures. From a problem domain standpoint, scaling up refers to suitability for many kinds of problems. These range from visual application domains-such as user interface design or scientific visualization-to general purpose programming in such diverse areas as financial planning, simulations, and real time applications with explicit timing requirements. To illustrate the scaling up problem, we discuss nine major subproblems and describe emerging solutions from existing VPL systems. First, we examine representation issues, including static representation, screen real estate, and documentation. Next, we examine programming language issues-procedural abstraction, interactive visual data abstraction, type checking, persistence, and efficiency. Finally, we look at issues beyond the coding process.{\textless}{\textgreater}},
	number = {3},
	urldate = {2025-02-05},
	journal = {Computer},
	author = {Burnett, M.M. and Baker, M.J. and Bohus, C. and Carlson, P. and Yang, S. and Van Zee, P.},
	month = mar,
	year = {1995},
	note = {Conference Name: Computer},
	keywords = {notion, Computer languages, Data structures, Data visualization, Programming profession, Documentation, Financial management, Large-scale systems, Logic programming, Timing, User interfaces},
	pages = {45--54},
	file = {Full Text PDF:C\:\\Users\\andre\\Zotero\\storage\\6WA5NKGL\\Burnett et al. - 1995 - Scaling up visual programming languages.pdf:application/pdf;IEEE Xplore Abstract Record:C\:\\Users\\andre\\Zotero\\storage\\VX2MVLHT\\366157.html:text/html},
}

@article{kurihara_programming_2015,
	series = {Proceedings of the 2015 {International} {Conference} on {Soft} {Computing} and {Software} {Engineering} ({SCSE}'15)},
	title = {A {Programming} {Environment} for {Visual} {Block}-{Based} {Domain}-{Specific} {Languages}},
	volume = {62},
	issn = {1877-0509},
	url = {https://www.sciencedirect.com/science/article/pii/S1877050915025879},
	doi = {10.1016/j.procs.2015.08.452},
	abstract = {Visual block-based programming is useful for various users such as novice programmers because it provides easy operations and improves the readability of programs. Also, in programming education, it is known to be effective to initially present basic language features and then gradually make more advanced features available. However, the cost of implementing such visual block-based languages remains a challenge. In this paper, we present a programming environment for providing visual block-based domain- specific languages (visual DSLs) that are translatable into various programming languages. In our environment, programs are built by combining visual blocks expressed in a natural language. Blocks represent program elements such as operations and variables. Tips represent snippets, and macro blocks represent procedures. Using Tips and macros make code more abstract, and reduce the number of blocks in code. Visual DSLs can be a front-end for various languages. It can be easily restricted and extended by adding and deleting blocks. We applied our programming environment to Processing, an educational programming language for media art. We show that the environment is useful for novice programmers who learn basic concepts of programming and the features of Processing.},
	urldate = {2025-02-05},
	journal = {Procedia Computer Science},
	author = {Kurihara, Azusa and Sasaki, Akira and Wakita, Ken and Hosobe, Hiroshi},
	month = jan,
	year = {2015},
	keywords = {notion, Domain-Specific Language, Programming Environment, Visual Programming},
	pages = {287--296},
	file = {PDF:C\:\\Users\\andre\\Zotero\\storage\\LEV465JD\\Kurihara et al. - 2015 - A Programming Environment for Visual Block-Based Domain-Specific Languages.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\andre\\Zotero\\storage\\PJPBABW3\\S1877050915025879.html:text/html},
}

@article{hils_visual_1992,
	title = {Visual languages and computing survey: {Data} flow visual programming languages},
	volume = {3},
	issn = {1045-926X},
	shorttitle = {Visual languages and computing survey},
	url = {https://www.sciencedirect.com/science/article/pii/1045926X9290034J},
	doi = {10.1016/1045-926X(92)90034-J},
	abstract = {The data flow model is a popular model on which to base a visual programming language. This paper describes alternatives available to a designer of data flow languages, describes many of the languages, discusses some strengths of the languages, and discusses some unsolved problems in the design of data flow languages.},
	number = {1},
	urldate = {2025-02-06},
	journal = {Journal of Visual Languages \& Computing},
	author = {Hils, Daniel D},
	month = mar,
	year = {1992},
	keywords = {notion},
	pages = {69--101},
	file = {1-s2.0-1045926X9290034J-main:C\:\\Users\\andre\\Zotero\\storage\\IAHBWX48\\1-s2.0-1045926X9290034J-main.pdf:application/pdf;Eingereichte Version:C\:\\Users\\andre\\Zotero\\storage\\XGB9BITC\\Hils - 1992 - Visual languages and computing survey Data flow visual programming languages.pdf:application/pdf;ScienceDirect Snapshot:C\:\\Users\\andre\\Zotero\\storage\\3TWMX6US\\1045926X9290034J.html:text/html},
}

@article{sousa_dataow_2012,
	title = {Dataﬂow {Programming} {Concept}, {Languages} and {Applications}},
	volume = {7},
	abstract = {Dataﬂow Programming (DFP) has been a research topic of Software Engineering since the ‘70s. The paradigm models computer programs as a direct graph, promoting the application of dataﬂow diagram principles to computation, opposing the more linear and classical Von Neumann model. DFP is the core to most visual programming languages, which claim to be able to provide end-user programming: with it’s visual interface, it allows non-technical users to extend or create applications without programming knowledges. Also, DFP is capable of achieving parallelization of computation without introducing development complexity, resulting in an increased performance of applications built with it when using multi-core computers. This survey describes how visual programming languages built on top of DFP can be used for end-user programming and how easy it is to achieve concurrency by applying the paradigm, without any development overhead. DFP’s open problems are discussed and some guidelines for adopting the paradigm are provided.},
	language = {en},
	journal = {Doctoral Symposium on Informatics Engineering},
	author = {Sousa, Tiago Boldt},
	year = {2012},
	keywords = {notion},
	file = {PDF:C\:\\Users\\andre\\Zotero\\storage\\N6PHTW37\\Sousa - Dataﬂow Programming Concept, Languages and Applications.pdf:application/pdf},
}

@article{van_deursen_domain-specific_2000,
	title = {Domain-specific languages: an annotated bibliography},
	volume = {35},
	issn = {0362-1340, 1558-1160},
	shorttitle = {Domain-specific languages},
	url = {https://dl.acm.org/doi/10.1145/352029.352035},
	doi = {10.1145/352029.352035},
	abstract = {We survey the literature available on the topic of domain-specific languages as used for the construction and maintenance of software systems. We list a selection of 75 key publications in the area, and provide a summary for each of the papers. Moreover, we discuss terminology, risks and benefits, example domain-specific languages, design methodologies, and implementation techniques.},
	language = {en},
	number = {6},
	urldate = {2025-02-09},
	journal = {ACM SIGPLAN Notices},
	author = {Van Deursen, Arie and Klint, Paul and Visser, Joost},
	month = jun,
	year = {2000},
	keywords = {notion},
	pages = {26--36},
	file = {PDF:C\:\\Users\\andre\\Zotero\\storage\\C4PD68NK\\Van Deursen et al. - 2000 - Domain-specific languages an annotated bibliography.pdf:application/pdf},
}

@inproceedings{roy_towards_1998,
	address = {Dunedin, New Zealand},
	title = {Towards a visual programming environment for software development},
	isbn = {978-0-8186-8828-7},
	url = {http://ieeexplore.ieee.org/document/707674/},
	doi = {10.1109/SEEP.1998.707674},
	abstract = {Visual programming concerns the use of graphical tools and visual metaphors for software. While various visual programming tools have been proposed, their success is largely limited to specialised programming domains. There has been less success in more general programming applications.},
	language = {en},
	urldate = {2025-02-10},
	booktitle = {Proceedings. 1998 {International} {Conference} {Software} {Engineering}: {Education} and {Practice} ({Cat}. {No}.{98EX220})},
	publisher = {IEEE Comput. Soc},
	author = {Roy, G.G. and Kelso, J. and Standing, C.},
	year = {1998},
	keywords = {notion},
	pages = {381--388},
	file = {PDF:C\:\\Users\\andre\\Zotero\\storage\\HRCDRN4D\\document.pdf:application/pdf},
}

@article{weintrop_block-based_2019,
	title = {Block-based programming in computer science education},
	volume = {62},
	issn = {0001-0782, 1557-7317},
	url = {https://dl.acm.org/doi/10.1145/3341221},
	doi = {10.1145/3341221},
	abstract = {Considering how block-based programming environments and tools might be used at the introductory level and beyond.},
	language = {en},
	number = {8},
	urldate = {2025-02-13},
	journal = {Communications of the ACM},
	author = {Weintrop, David},
	month = jul,
	year = {2019},
	keywords = {notion},
	pages = {22--25},
	file = {PDF:C\:\\Users\\andre\\Zotero\\storage\\SB6IMUUR\\Weintrop - 2019 - Block-based programming in computer science education.pdf:application/pdf},
}
